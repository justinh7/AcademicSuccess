<?xml version="1.0" encoding="UTF-8"?>
<!--
Created by Khoa Le on 2017.11.30 
Copyright Â© 2017 Khoa Le. All rights reserved.
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"   
      xmlns:ui="http://java.sun.com/jsf/facelets"         
      xmlns:p="http://primefaces.org/ui"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:c="http://xmlns.jcp.org/jsp/jstl/core">

    <!-- Do not enter tags before the composition line since they are ignored by JSF -->

    <!-- This page is constructed based on the siteTemplate -->
    <ui:composition template="/template/siteTemplate.xhtml">
        <ui:define name="title">
            <!-- Set the page title -->
            <h:outputText value="Academic Graph"></h:outputText>
        </ui:define>

        <!-- Create the content for this page below -->
        <ui:define name="editableContent">

            <h:form id="AcademicGraphForm">
                <p:growl id="msg" showDetail="true" escape="false" />

                <div id="pickCountries" align="center" >
                    <h1>Select Data to Graph</h1>

                    <!-- 
                    If country data is changed, recreate the DualListModel used by p:pickList below.
                    -->
                    <c:if test="#{countryController.countryDataChanged}">
                        #{pickListController.recreateDualListModel()}
                    </c:if>

                    <!--
                    p:pickList is used for transferring data between two different collections. 
                    In our case:
                        <> left collection (Source) lists all of the country names in the database, and
                        <> right collection (Target) lists the country names selected by the user.
                    
                    To select or unselect a country name:
                        <> Use the arrow buttons
                        <> Drag and drop from one collection to another
                        <> Double click the name
                    
                    To reorder the collection:
                        <> Drag and drop within the collection
                    
                    Skinning:
                        <> p:pickList buttons are styled with .ui-button in siteStyles.css
                        <> p:pickList collection captions are styled with .ui-picklist-caption in siteStyles.css

                    Create the left collection (Source) listing all of the country names from the database
                    in the pickListController bean and display it here. The right collection (Target)
                    will be shown as empty and will be filled as the user makes selections.
                    -->
                    <p:pickList id="pickList" value="#{pickListController.countryNames}" var="countryName" 
                                itemLabel="#{countryName}" itemValue="#{countryName}" >

                        <!-- Caption of the Left Collection (Source) -->
                        <f:facet name="sourceCaption">List of Countries</f:facet>

                        <!-- Caption of the Right Collection (Target) -->
                        <f:facet name="targetCaption">Selected Countries</f:facet> 

                        <!--
                        If transferred from Target list back to Source list, sort the Source list 
                        again and update the CountryChartsForm to show the newly sorted Source list.
                        -->
                        <p:ajax event="transfer" listener="#{pickListController.handleTransfer}" 
                                update=":CountryChartsForm" />
                    </p:pickList>
                    <br /><br />
                    <!--
                    *********************************************************************************
                    The colon ':' prefix in the 'update' attribute indicates that the component 
                    with 'id' given after the colon is outside of the closest parent NamingContainer. 
                    Example NamingContainers: h:form, p:pickList, p:dataTable, h:panelGroup.
                    
                    For example, in the p:ajax update attribute, we use a colon because the id
                    CountryChartsForm is outside of the closest parent NamingContainer p:pickList.
                    
                    We also use a colon for the BarChartForm and HorBarChartForm ids below
                    because they are outside of the closest parent NamingContainer.
                    *********************************************************************************
                    -->

                    <!-- BAR CHART button -->
                    <p:commandButton id="barChartButton" icon="ui-icon-extlink" value="Bar Chart" 
                                     styleClass="commandButton" update=":BarChartForm" 
                                     oncomplete="PF('BarChartDialog').show()" />

                    &nbsp;
                    <!-- HORIZONTAL BAR CHART button -->
                    <p:commandButton id="horBarChartButton" icon="ui-icon-extlink" value="Horizontal Bar Chart" 
                                     styleClass="commandButton" update=":HorBarChartForm" 
                                     oncomplete="PF('HorBarChartDialog').show()" />
                </div>
            </h:form>

            <!-- 
            Clicking the Bar Chart button displays the included 
            BarChart.xhtml file in a dialog box on top of this page. 
            -->
            <ui:include src="BarChart.xhtml"/>

            <!--
            Clicking the Horizontal Bar Chart button displays the included 
            HorizontalBarChart.xhtml file in a dialog box on top of this page. 
            -->
            <ui:include src="HorizontalBarChart.xhtml"/>

        </ui:define>

    </ui:composition>
    <!-- Do not enter tags after the composition line since they are ignored by JSF -->

</html>